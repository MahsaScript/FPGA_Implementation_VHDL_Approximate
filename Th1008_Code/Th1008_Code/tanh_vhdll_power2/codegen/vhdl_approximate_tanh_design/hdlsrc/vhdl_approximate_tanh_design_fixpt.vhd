-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Mahsa\Desktop\Th1008_Code\tanh_vhdll_power2\codegen\vhdl_approximate_tanh_design\hdlsrc\vhdl_approximate_tanh_design_fixpt.vhd
-- Created: 2021-08-09 23:01:17
-- 
-- Generated by MATLAB 9.8, MATLAB Coder 5.0 and HDL Coder 3.16
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: vhdl_approximate_tanh_design_fixpt
-- Source Path: vhdl_approximate_tanh_design_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY vhdl_approximate_tanh_design_fixpt IS
  PORT( x                                 :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En10
        y_out                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En13
        );
END vhdl_approximate_tanh_design_fixpt;


ARCHITECTURE rtl OF vhdl_approximate_tanh_design_fixpt IS

  -- Constants
  CONSTANT One                            : real := 
    2.0;  -- double
  CONSTANT C_divbyzero_p                  : real := 
    1.0E+308;  -- double

  -- Functions
  -- HDLCODER_TO_SIGNED
  FUNCTION hdlcoder_to_signed(arg: real; width: integer) RETURN signed IS
  BEGIN
    RETURN to_signed(integer(arg), width);
  END FUNCTION;


  -- Signals
  SIGNAL x_signed                         : signed(13 DOWNTO 0);  -- sfix14_En10
  SIGNAL y_out_tmp                        : signed(13 DOWNTO 0);  -- sfix14_En13

BEGIN
  x_signed <= signed(x);

  vhdl_approximate_tanh_design_fixpt_1_output : PROCESS (x_signed)
    VARIABLE y : signed(31 DOWNTO 0);
    VARIABLE tmp : signed(31 DOWNTO 0);
    VARIABLE cast : real;
    VARIABLE div_temp : real;
    VARIABLE mul_temp : signed(28 DOWNTO 0);
    VARIABLE cast_0 : signed(27 DOWNTO 0);
    VARIABLE cast_1 : signed(27 DOWNTO 0);
    VARIABLE cast_2 : unsigned(31 DOWNTO 0);
    VARIABLE sll_temp : unsigned(31 DOWNTO 0);
    VARIABLE add_temp : signed(32 DOWNTO 0);
    VARIABLE cast_3 : signed(31 DOWNTO 0);
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(32 DOWNTO 0);
    VARIABLE sub_temp : signed(32 DOWNTO 0);
    VARIABLE cast_4 : signed(31 DOWNTO 0);
  BEGIN
    sll_temp := to_unsigned(16#00000000#, 32);
    cast_2 := to_unsigned(16#00000000#, 32);
    --HDL code generation from MATLAB function: vhdl_approximate_tanh_design_fixpt
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --           Generated by MATLAB 9.8 and Fixed-Point Designer 7.0           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --'vhdl_approximate_tanh_design_fixpt:8' fm = get_fimath();
    --'vhdl_approximate_tanh_design_fixpt:10' y_out = fi(1-(fi_dotdiv(2, (power(2,fi_toint(((fi(4-1-(1/4)+(1/8), 0, 14, 12, fm))*x)))+1))), 1, 14, 13, fm);
    --'vhdl_approximate_tanh_design_fixpt:46' coder.inline( 'always' );
    --'vhdl_approximate_tanh_design_fixpt:47' if isfi( u )
    --'vhdl_approximate_tanh_design_fixpt:48' nt = numerictype( u );
    --'vhdl_approximate_tanh_design_fixpt:49' s = nt.SignednessBool;
    --'vhdl_approximate_tanh_design_fixpt:50' wl = nt.WordLength;
    --'vhdl_approximate_tanh_design_fixpt:51' y = int32( fi( u, s, wl, 0, hdlfimath ) );
    mul_temp := to_signed(16#2E00#, 15) * x_signed;
    cast_0 := mul_temp(27 DOWNTO 0);
    cast_1 := resize(cast_0(27 DOWNTO 22), 28);
    y := resize(cast_1, 32);
    IF y > to_signed(16#0000001E#, 32) THEN 
      tmp := to_signed(16#7FFFFFFF#, 32);
    ELSE 
      IF y(31) = '1' THEN 
        cast_2 := X"00000000";
      ELSE 
        cast_2 := unsigned(y);
      END IF;
      sll_temp := to_unsigned(16#00000001#, 32) sll to_integer(cast_2);
      IF sll_temp(31) /= '0' THEN 
        tmp := X"7FFFFFFF";
      ELSE 
        tmp := signed(sll_temp);
      END IF;
    END IF;
    --'vhdl_approximate_tanh_design_fixpt:33' coder.inline( 'always' );
    --'vhdl_approximate_tanh_design_fixpt:34' if isfi( a ) && isfi( b )
    --'vhdl_approximate_tanh_design_fixpt:39' else
    --'vhdl_approximate_tanh_design_fixpt:40' c = a ./ b;
    add_temp := resize(tmp, 33) + to_signed(1, 33);
    IF (add_temp(32) = '0') AND (add_temp(31) /= '0') THEN 
      cast_3 := X"7FFFFFFF";
    ELSIF (add_temp(32) = '1') AND (add_temp(31) /= '1') THEN 
      cast_3 := X"80000000";
    ELSE 
      cast_3 := add_temp(31 DOWNTO 0);
    END IF;
    cast := real(to_integer(cast_3));
    IF cast = 0.0 THEN 
      div_temp := C_divbyzero_p;
    ELSE 
      div_temp := One / cast;
    END IF;
    sub_cast := hdlcoder_to_signed(div_temp, 32);
    sub_cast_0 := resize(sub_cast, 33);
    sub_temp := to_signed(1, 33) - sub_cast_0;
    IF (sub_temp(32) = '0') AND (sub_temp(31) /= '0') THEN 
      cast_4 := X"7FFFFFFF";
    ELSIF (sub_temp(32) = '1') AND (sub_temp(31) /= '1') THEN 
      cast_4 := X"80000000";
    ELSE 
      cast_4 := sub_temp(31 DOWNTO 0);
    END IF;
    y_out_tmp <= signed'(cast_4(0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
  END PROCESS vhdl_approximate_tanh_design_fixpt_1_output;


  y_out <= std_logic_vector(y_out_tmp);

END rtl;

